// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addFeed = `-- name: AddFeed :one
INSERT INTO feeds (name, url, user_id) 
VALUES (
    $1,
    $2,
    $3
)
RETURNING name, url, user_id
`

type AddFeedParams struct {
	Name   string
	Url    string
	UserID uuid.UUID
}

func (q *Queries) AddFeed(ctx context.Context, arg AddFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, addFeed, arg.Name, arg.Url, arg.UserID)
	var i Feed
	err := row.Scan(&i.Name, &i.Url, &i.UserID)
	return i, err
}

const feedsReset = `-- name: FeedsReset :exec
DELETE FROM feeds *
`

func (q *Queries) FeedsReset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, feedsReset)
	return err
}

const getFeeds = `-- name: GetFeeds :many
SELECT feeds.name, feeds.url, users.name as user_name FROM feeds
LEFT JOIN users
ON users.id = feeds.user_id
`

type GetFeedsRow struct {
	Name     string
	Url      string
	UserName sql.NullString
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
